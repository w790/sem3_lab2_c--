name: C++ CI

on:
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.bump_version.outputs.new_tag }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags --force
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "last_tag=$last_tag" >> $GITHUB_ENV
          echo "last_tag=$last_tag" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump_version
        run: |
          IFS='.' read -r major minor patch <<< "${last_tag//v/}"
          patch=$((patch + 1))
          new_tag="v$major.$minor.$patch"
          echo "new_tag=$new_tag" >> $GITHUB_ENV
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Show version info
        run: |
          echo "Last tag: ${{ env.last_tag }}"
          echo "New tag: ${{ env.new_tag }}"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.new_tag }}
          name: Release ${{ env.new_tag }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build libgtest-dev build-essential

      - name: Clean build directory
        run: rm -rf build

      - name: Configure with Ninja
        run: |
          echo "Building version: ${{ needs.create-release.outputs.new_tag }}"
          cmake -G "Ninja" -S . -B build -DVERSION_PROJECT="${{ needs.create-release.outputs.new_tag }}"

      - name: Build project
        run: cmake --build build

      - name: Run tests
        run: |
          ./build/lab2_tests
          echo "Tests executed successfully"

      - name: Run main program
        run: |
          echo "1" | ./build/lab2_c++
          echo "Program executed successfully"

      - name: Package (Linux)
        run: |
          cmake --install build --prefix package
          cpack -G DEB --config build/CPackConfig.cmake

      - name: Upload Linux package
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-release.outputs.new_tag }}
          files: lab2_c++-*.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    needs: create-release
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          choco install ninja -y

      - name: Setup vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat -disableMetrics
          .\vcpkg\vcpkg install gtest

      - name: Clean build directory
        run: |
          Remove-Item -Recurse -Force build -ErrorAction SilentlyContinue

      - name: Configure with Ninja and vcpkg
        run: |
          echo "Building version: ${{ needs.create-release.outputs.new_tag }}"
          cmake -G "Ninja" -S . -B build `
            -DVERSION_PROJECT="${{ needs.create-release.outputs.new_tag }}" `
            -DCMAKE_TOOLCHAIN_FILE="vcpkg/scripts/buildsystems/vcpkg.cmake"

      - name: Build project
        run: cmake --build build

      - name: Run tests
        run: |
          .\build\lab2_tests.exe
          echo "Tests executed successfully"

      - name: Run main program
        run: |
          echo "1" | .\build\lab2_c++.exe
          echo "Program executed successfully"

      - name: Package (Windows)
        run: |
          cmake --install build --prefix package
          cpack -G ZIP --config build/CPackConfig.cmake

      - name: Upload Windows package
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-release.outputs.new_tag }}
          files: lab2_c++-*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}